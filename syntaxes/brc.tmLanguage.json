{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Bits Runner Code",
	"scopeName": "source.brc",
	"patterns": [
		{
			"include": "#comment"
		},
		{
			"include": "#type"
		},
		{
			"include": "#keyword"
		},
		{
			"include": "#string"
		},
		{
			"include": "#numeric"
		},
		{
			"include": "#function"
		},
		{
			"include": "#operator"
		}
	],
	"repository": {
		"comment": {
			"name": "comment.brc",
			"patterns": [
				{
					"name": "comment.block.brc",
					"begin": "/\\*",
					"end": "\\*/",
					"patterns": [
						{
							"include": "#comment"
						}
					]
				},
				{
					"name": "comment.line.brc",
					"match": "//.*$"
				}
			]
		},
		"type": {
			"name": "storage.type.brc",
			"patterns": [
				{
					"name": "storage.type.brc",
					"match": "\\b(u8|u32|u64|s8|s32|s64|f32|f64|bool)\\b"
				},
				{
					"name": "storage.type.brc",
					"match": "\\b(data|blob)(?=<)"
				}
			]
		},
		"keyword": {
			"name": "keyword.brc",
			"patterns": [
				{
					"name": "keyword.control.brc",
					"match": "\\b(fun|raw|if|else|rep|ret|and|or|xor|not|blob)\\b"
				},
				{
					"name": "keyword.control.meta.brc",
					"match": "(\\s|^)(@module|@export|@import|@extern)\\b"
				}
			]
		},
		"string": {
			"name": "string.brc",
			"patterns": [
				{
					"name": "string.quoted.double.brc",
					"begin": "\"",
					"end": "\""
				},
				{
					"name": "string.quoted.single.brc",
					"begin": "'",
					"end": "'"
				}
			]
		},
		"numeric": {
			"name": "constant.brc",
			"patterns": [
				{
					"name": "constant.numeric.brc",
					"match": "\\b[01]+b\\b"
				},
				{
					"name": "constant.numeric.brc",
					"match": "\\b(0x[0-9a-f]+)\\b"
				},
				{
					"name": "constant.numeric.brc",
					"match": "\\b(\\+|-)?[0-9]+[0-9_]*[0-9]+\\.[0-9]+[0-9_]*[0-9]+\\b"
				},
				{
					"name": "constant.numeric.brc",
					"match": "\\b(\\+|-)?[0-9]+\\b"
				},
				{
					"name": "constant.language.brc",
					"match": "\\b(true|false)\\b"
				}
			]
		},
		"function": {
			"name": "entity.name.function",
			"patterns": [
				{
					"name": "entity.name.function",
					"match": "([^\\.\\s]+)(?=\\()"
				}
			]
		},
		"operator": {
			"name": "keyword.operator.brc",
			"match": "(<-|->|<=|>=|<|>|!=|=|\\+|-|\\*|\/|%)"
		}
	}
}